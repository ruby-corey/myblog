"""
Django 项目的配置文件。
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
import environ

# 初始化环境
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env_path = BASE_DIR/ ".env"
if env_path.exists():
    env.read_env(env_path)
else :
    print("错误未找到env文件")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-(0d_c2%lud!i^pz8$7e4jdzwni4nelrp(fwhl2&-2r+j(ng@k("
SECRET_KEY = env("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DJANGO_DEBUG")#env.bool("DJANGO_DEBUG",default=False)
SHOW_GRID = DEBUG

ALLOWED_HOSTS = env.list('PRIVATE_HOST', default=['localhost', '127.0.0.1'])


# Application definition(py manage.py migrate)
# 这个 migrate 命令查看 INSTALLED_APPS 配置，并根据 mysite/settings.py 文件中的数据库
# 配置和随应用提供的数据库迁移文件（我们将在后面介绍这些），创建任何必要的数据库表.
INSTALLED_APPS = [
    #为了在我们的工程中包含应用
    "MyBlog.apps.MyblogConfig",

    "django.contrib.admin",#管理员站点。
    "django.contrib.auth",#认证授权系统.
    "django.contrib.contenttypes",#内容类型框架.
    "django.contrib.sessions",#会话框架。
    "django.contrib.messages",#消息框架。
    "django.contrib.staticfiles",#管理静态文件的框架。
    "debug_toolbar",
    "markdownx",
]

MIDDLEWARE = [
    #我们要把django-debug-toolbar这个中间件尽可能配置到最前面，但是，必须要要放在处理编码和响应内容的中间件后面，
    # 比如我们要是使用了GZipMiddleware，就要把DebugToolbarMiddleware放在GZipMiddleware后面。
    "debug_toolbar.middleware.DebugToolbarMiddleware",

    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "MyBlog.context_processors.sidebar_data",    
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
     "default": env.db(),# 自动解析 DATABASE_URL
    # {
    #     "ENGINE": "django.db.backends.mysql",
    #     "NAME": os.environ.get('DB_NAME'),
    #     'USER': os.environ.get('DB_USER'),
    #     'PASSWORD': os.environ.get('DB_PASSWORD'),
    #     'HOST':os.environ.get('DB_HOST'),
    #     'PORT': os.environ.get('DB_PORT'),
    # }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "Zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

INTERNAL_IPS = [
    # 只有访问这里面配置的ip地址时， Debug Toolbar才是展示出来。
    "127.0.0.1",
    # ...
]

MEDIA_ROOT = os.path.join(BASE_DIR,'media')
MEDIA_URL = '/media/'

